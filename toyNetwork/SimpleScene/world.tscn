[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D


var jumperScene = preload(\"res://SimpleScene/Jumper.tscn\")

func _ready():
	get_tree().connect(\"connected_to_server\",self,\"connected_to_server\")
	get_tree().connect(\"server_disconnected\",self,\"server_disconnected\")
	get_tree().connect(\"network_peer_connected\",self,\"network_peer_connected\")
	get_tree().connect(\"network_peer_disconnected\",self,\"network_peer_disconnected\")
	server_disconnected()

var hosting = false
var peer = null
func _process(delta):
	if get_tree().has_network_peer():
		if peer != get_tree().network_peer:
			clearJumpers()
			peer = get_tree().network_peer
			hosting = false
		if get_tree().network_peer.get_connection_status() == NetworkedMultiplayerPeer.CONNECTION_CONNECTED:
			if hosting == false and get_tree().get_network_unique_id() == 1:
				hosting = true
				host()
	else:
		clearJumpers()
		
func host():
	clearJumpers()
	addJumper(1)

func server_disconnected():
	clearJumpers()

	
func connected_to_server():
	addJumper(get_tree().get_network_unique_id())


func network_peer_disconnected(id):
	get_node(playerNodeFromId(id)).queue_free()


func network_peer_connected(id):
	addJumper(id)


func playerNodeFromId(id)->String:
	return \"player\" + String(id)


var jumpers = []

func clearJumpers():
	for j in jumpers:
		j.free()
	jumpers = []

func addJumper(id):
	var j = jumperScene.instance()
	j.name = playerNodeFromId(id)
	j.set_network_master(id)
	j.isCurrentPlayer = get_tree().get_network_unique_id() == id
	add_child(j,true)
	jumpers.push_back(j)
"

[node name="world" type="Node2D"]
script = SubResource( 1 )

[node name="floor" type="StaticBody2D" parent="."]

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="floor"]
polygon = PoolVector2Array( 0, 0, 0, 1080, 1920, 1080, 1920, 0, 1984, -64, 1984, 1144, -64, 1144, -64, -64, 1984, -64, 1920, 0 )
